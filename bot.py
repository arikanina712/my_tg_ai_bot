import os, asyncio, logging, random, datetime, feedparser
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from openai import OpenAI
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID   = os.getenv("CHAT_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN or not CHAT_ID:
    raise RuntimeError("–ù–µ—Ç BOT_TOKEN –∏–ª–∏ CHAT_ID –≤ .env")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)
scheduler = AsyncIOScheduler()
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

# === RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ ===
FEEDS = [
    "https://habr.com/ru/rss/all/all/?fl=ru",
    "https://vc.ru/rss/all",
    "https://rb.ru/rss/"
]

def get_latest_news():
    items = []
    for url in FEEDS:
        feed = feedparser.parse(url)
        for e in feed.entries[:3]:
            items.append(f"{e.title} ‚Äî {e.link}")
    random.shuffle(items)
    return items[:5] or ["–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π —Å–µ–≥–æ–¥–Ω—è"]

# === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ prompt –¥–ª—è GPT ===
def make_prompt():
    try:
        with open("brand_voice.md", "r", encoding="utf-8") as f:
            style = f.read()
    except FileNotFoundError:
        style = "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ç–æ–Ω; —Ç–µ–∑–∏—Å ‚Üí –∏–Ω—Å–∞–π—Ç ‚Üí –≤–æ–ø—Ä–æ—Å."
    return f"""–¢—ã –∞–≤—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ –ø—Ä–æ HR, –∫–∞—Ä—å–µ—Ä—É –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ.

–°—Ç–∏–ª—å:
{style}

–í–æ—Ç –Ω–æ–≤–æ—Å—Ç–∏:
{get_latest_news()}

–°–¥–µ–ª–∞–π –ø–æ—Å—Ç 900‚Äì1200 –∑–Ω–∞–∫–æ–≤:
‚Äî 1 —Ç–µ–∑–∏—Å ‚Üí 1 –∏–Ω—Å–∞–π—Ç ‚Üí 1 –≤–æ–ø—Ä–æ—Å
‚Äî —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ç–æ–Ω, –±–µ–∑ —à—Ç–∞–º–ø–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Ç–∏—Ä–µ
"""

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –ø–æ—Å—Ç—É ===
async def generate_image(prompt: str) -> str | None:
    if not client:
        return None
    try:
        img = client.images.generate(
            model="gpt-image-1",
            prompt=f"–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è Telegram-–ø–æ—Å—Ç–∞ –≤ —Å—Ç–∏–ª–µ HR-—Ñ–∏–ª—å—Ç—Ä: {prompt}. "
                   f"–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞, –º–∏–Ω–∏–º–∞–ª–∏–∑–º, —á–∏—Å—Ç—ã–π —Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω, –º—è–≥–∫–∏–µ —Ç–µ–Ω–∏, —Å–ø–æ–∫–æ–π–Ω—ã–µ —Ü–≤–µ—Ç–∞, "
                   f"–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞ 1:1.",
            size="1024x1024"
        )
        return img.data[0].url
    except Exception as e:
        logging.exception("Image generation error: %s", e)
        return None

# === –ö–Ω–æ–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ ===
def rating_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data="rate_up"),
         InlineKeyboardButton(text="üëé –¢–∞–∫ —Å–µ–±–µ", callback_data="rate_down")]
    ])

@router.callback_query(F.data.in_({"rate_up", "rate_down"}))
async def rate(cb):
    with open("ratings.csv", "a", encoding="utf-8") as f:
        f.write(f"{datetime.datetime.now().isoformat()};{cb.data};{cb.from_user.id}\n")
    await cb.answer("–°–ø–∞—Å–∏–±–æ! –£—á—Ç—ë–º.")

# === –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ ===
def draft_mode_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ß–µ—Ä–Ω–æ–≤–∏–∫ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)", callback_data="draft_text")],
        [InlineKeyboardButton(text="üñº –ß–µ—Ä–Ω–æ–≤–∏–∫ + –∫–∞—Ä—Ç–∏–Ω–∫–∞", callback_data="draft_image")]
    ])

@router.callback_query(F.data == "draft_text")
async def cb_draft_text(cb):
    await make_post(False)
    await cb.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@router.callback_query(F.data == "draft_image")
async def cb_draft_image(cb):
    await make_post(True)
    await cb.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ ===
async def make_post(with_image: bool = True):
    today = datetime.date.today().strftime("%d.%m.%Y")
    await bot.send_message(CHAT_ID, f"ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ ({today})")

    text = "–ù–µ—Ç OPENAI_API_KEY ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–≥–ª—É—à–∫—É."
    if client:
        try:
            resp = client.responses.create(model="gpt-4.1-mini", input=make_prompt())
            text = resp.output_text
        except Exception:
            logging.exception("OpenAI error")
            text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (–ø—Ä–æ–≤–µ—Ä—å OPENAI_API_KEY)."

    caption = f"üì∞ –ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞ {today}\n\n{text}\n\n#draft"

    if with_image:
        first_line = text.strip().splitlines()[0] if text.strip() else "HR –∏ –∫–∞—Ä—å–µ—Ä–∞"
        image_url = await generate_image(first_line[:120])
        if image_url:
            if len(caption) > 1000:
                await bot.send_photo(CHAT_ID, image_url)
                await bot.send_message(CHAT_ID, caption, reply_markup=rating_kb())
            else:
                await bot.send_photo(CHAT_ID, image_url, caption=caption, reply_markup=rating_kb())
            return

    await bot.send_message(CHAT_ID, caption, reply_markup=rating_kb())

# === –ö–æ–º–∞–Ω–¥—ã ===
@router.message(CommandStart())
async def on_start(m: Message):
    await m.reply("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —á–µ—Ä–Ω–æ–≤–∏–∫–∞:", reply_markup=draft_mode_kb())

@router.message(Command("draft"))
async def on_draft(m: Message):
    await make_post(False)
    await m.reply("–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏.")

@router.message(Command("draft_image"))
async def on_draft_image(m: Message):
    await make_post(True)
    await m.reply("–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π.")

# === –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ===
@scheduler.scheduled_job("cron", hour=10, minute=0)
async def daily_job():
    await make_post()

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
from aiohttp import web

async def health(_):
    return web.Response(text="ok")

async def start_web():
    app = web.Application()
    app.router.add_get("/", health)
    port = int(os.getenv("PORT", "10000"))  # Render –∑–∞–¥–∞—ë—Ç PORT
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info(f"HTTP server started on 0.0.0.0:{port}")

async def main():
    # –≤–∞–∂–Ω–æ: –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ long polling, –ø–æ—ç—Ç–æ–º—É —É–±–∏—Ä–∞–µ–º webhook
    await bot.delete_webhook(drop_pending_updates=True)
    scheduler.start()

    try:
        await bot.send_message(CHAT_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–∏—à–∏—Ç–µ /draft –≤ –õ–° –±–æ—Ç—É.")
    except Exception:
        logging.exception("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤ CHAT_ID –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")

    logging.info("–°—Ç–∞—Ä—Ç—É–µ–º polling‚Ä¶")
    # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ–º health-—Å–µ—Ä–≤–µ—Ä (—á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç)
    await asyncio.gather(
        start_web(),
        dp.start_polling(bot, allowed_updates=["message", "callback_query"]),
    )

if __name__ == "__main__":
    asyncio.run(main())
